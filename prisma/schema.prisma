// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum PostProvider {
  medium
  dev
}

enum RepoProvider {
  github
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  github        Github?   @relation(fields: [githubId], references: [id])
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)

  githubId String?
  @@map(name: "users")
}

model Github {
  id          String   @unique
  accessToken String
  login       String
  name        String
  followers   Int
  following   Int
  publicRepos Int
  publicGists Int
  url         String
  avatarUrl   String?
  blog        String?
  location    String?
  company     String?
  hireable    Boolean?
  User        User[]
}

model Post {
  id          String       @id @default(cuid())
  title       String
  description String
  likes       Int
  comments    Int
  provider    PostProvider
  feed        Feed         @relation(fields: [feedId], references: [id])
  feedId      String
}

model Repo {
  id       String       @id @default(cuid())
  title    String
  stars    Int
  forks    Int
  provider RepoProvider
  feed     Feed         @relation(fields: [feedId], references: [id])
  feedId   String
}

model Feed {
  id        String   @id @default(cuid())
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())
  url       String
  Post      Post[]
  Repo      Repo[]
  Profile   Profile?
}

model Profile {
  id        String   @id @default(cuid())
  published Boolean  @default(false)
  feed      Feed     @relation(fields: [feedId], references: [id])
  owner     User?    @relation(fields: [ownerId], references: [id])
  ownerId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  feedId    String
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map(name: "sessions")
}
