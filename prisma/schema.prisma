// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum PostProvider {
  medium
  dev
}

enum RepoProvider {
  github
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)

  githubId String?
  @@map(name: "users")
}

model GithubAccount {
  id             String   @unique
  accessToken    String
  login          String
  name           String
  followersCount Int
  followingCount Int
  reposCount     Int
  gistsCount     Int
  url            String
  Profile        Profile?
}

model Post {
  id          String       @id @default(cuid())
  title       String
  description String
  likes       Int          @default(0)
  comments    Int          @default(0)
  provider    PostProvider
  feed        Feed         @relation(fields: [feedId], references: [id])
  feedId      String
}

model Repo {
  id          String       @id @default(cuid())
  title       String
  stars       Int          @default(0)
  forks       Int          @default(0)
  provider    RepoProvider
  homepageUrl String?
  feed        Feed         @relation(fields: [feedId], references: [id])
  feedId      String
}

model Feed {
  id        String   @id @default(cuid())
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())
  url       String
  Post      Post[]
  Repo      Repo[]
  Profile   Profile?
}

model Profile {
  id              String        @id @default(cuid())
  isHireable      Boolean
  company         String?
  location        String?
  homepageUrl     String?
  github          GithubAccount @relation(fields: [githubAccountId], references: [id])
  published       Boolean       @default(false)
  feed            Feed          @relation(fields: [feedId], references: [id])
  user            User?         @relation(fields: [userId], references: [id])
  userId          String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  feedId          String
  githubAccountId String
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map(name: "sessions")
}
